name: Update CSV on Issue Comment

on:
  issue_comment:
    types: [created]

jobs:
  update-csv:
    if: |
      contains(github.event.comment.body, 'insert') && 
      github.event.comment.user.login == 'sauravpanda'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      statuses: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyGithub

      - name: Run Python script
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          REPO_NAME: ${{ github.repository }}
        run: |
          cat > update_csv.py << 'EOL'
          import os
          import csv
          from github import Github

          def extract_value(text, key):
              import re
              pattern = f"\\*\\*{key}\\*\\*:\\s*([^\\n]+)"
              match = re.search(pattern, text)
              return match.group(1).strip() if match else ''

          def main():
              # Setup GitHub client
              g = Github(os.environ['GITHUB_TOKEN'])
              repo = g.get_repo(os.environ['REPO_NAME'])
              issue_number = int(os.environ['ISSUE_NUMBER'])
              issue = repo.get_issue(issue_number)

              # Extract values from issue body
              issue_body = issue.body
              data = {
                  'dataset': extract_value(issue_body, 'Dataset'),
                  'model': extract_value(issue_body, 'Model'),
                  'accuracy': extract_value(issue_body, 'Accuracy').replace('%', ''),
                  'avg_latency': extract_value(issue_body, 'Average Latency').replace('ms', ''),
                  'tokens_per_second': extract_value(issue_body, 'Tokens/Second'),
                  'memory_usage': extract_value(issue_body, 'Memory Usage').replace('MB', ''),
                  'browser': extract_value(issue_body, 'Browser'),
                  'os': extract_value(issue_body, 'OS'),
                  'cpu': extract_value(issue_body, 'CPU'),
                  'ram': extract_value(issue_body, 'RAM'),
                  'gpu': extract_value(issue_body, 'GPU'),
                  'timestamp': extract_value(issue_body, 'Timestamp')
              }

              # Create new CSV line
              new_line = [
                  data['dataset'],
                  data['model'],
                  'evaluation',
                  f"{data['accuracy']}%",
                  '250',  # Hardcoded as per example
                  f"{data['avg_latency']}ms",
                  data['tokens_per_second'],
                  f"{data['memory_usage']}MB",
                  data['browser'],
                  data['os'],
                  data['cpu'],
                  data['ram'],
                  data['gpu'],
                  data['timestamp']
              ]

              # Read and update CSV
              csv_path = 'webapp/public/main.csv'
              with open(csv_path, 'r') as f:
                  content = f.readlines()
                  header = content[0]
                  existing_lines = content[1:]

              # Add new line and write back
              with open(csv_path, 'w') as f:
                  f.write(header)
                  f.writelines(existing_lines)
                  f.write(','.join(new_line) + '\n')

              # Create branch and PR
              branch_name = f"update-csv-{issue_number}"
              main_branch = repo.get_branch("main")
              repo.create_git_ref(f"refs/heads/{branch_name}", main_branch.commit.sha)

              # Commit changes
              with open(csv_path, 'r') as f:
                  content = f.read()
              repo.update_file(
                  csv_path,
                  f"Update main.csv from issue #{issue_number}",
                  content,
                  repo.get_contents(csv_path).sha,
                  branch=branch_name
              )

              # Create PR
              pr = repo.create_pull(
                  title=f"Update main.csv from issue #{issue_number}",
                  body=f"This PR updates main.csv with data from issue #{issue_number}",
                  head=branch_name,
                  base="main"
              )

              # Comment on issue
              issue.create_comment(f"Created PR to update main.csv with the provided data.\nPR: #{pr.number}")

          if __name__ == "__main__":
              try:
                  main()
              except Exception as e:
                  # Get issue and comment error
                  g = Github(os.environ['GITHUB_TOKEN'])
                  repo = g.get_repo(os.environ['REPO_NAME'])
                  issue = repo.get_issue(int(os.environ['ISSUE_NUMBER']))
                  issue.create_comment(f"Failed to create PR. Error: {str(e)}")
                  raise e
          EOL

          python update_csv.py 